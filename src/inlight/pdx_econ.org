* Namespace and DB Connection
#+begin_src clojure :session PDX_ECON
  (ns inlight.core
    (:require [incanter.core :as i]
              [incanter.excel :as ixl]
              [next.jdbc :as jdbc]
              [next.jdbc.result-set :as jdbcrs]
              [sqlingvo.core :as sql]
              [clojure.string :as str]
              [clojure.pprint :as pp])
    (:import java.sql.DriverManager))

  ;; Create H2 DB.
  (def db-cred {:dbtype "postgresql"
                :dbname "ECON"
                :host "127.0.0.1"
                :post "5432"
                :user "postgres"
                :password "ela8teD53"})

  (def db (jdbc/get-datasource db-cred))

  (def dbsql (sql/db :postgresql))
#+end_src

#+RESULTS:
: nil#'inlight.core/db-cred#'inlight.core/db#'inlight.core/dbsql
* Table creation--PDX Employment Wage & Salary Data
#+begin_src clojure :session PDX_ECON
  ;; REPL -- Import table of Portland Employment Wage & Salary Data
  (def table-pdx-earn (ixl/read-xls "../inlight/resources/public/portland-emphrsearn-all-transposed.xlsx"))

  ;; Convert column names to uppercase and keywords, zipping with data values.
  (def table-pdx-earn-maps
    (for [mx (i/matrix table-pdx-earn)]
      (zipmap (map keyword
                   (map str/lower-case
                        (map #(str/replace % "-" "_") (i/col-names table-pdx-earn))))
              mx)))
  ;; (take 2 table-pdx-earn-maps)

  ;; Convert Jave Date to String for table upload.
  (defn date-to-string [date] (.format (java.text.SimpleDateFormat. "MM/dd/YYY") date))
  (def table-pdx-earn-maps-strdate
    (map #(update-in % [:month] date-to-string) table-pdx-earn-maps))

  ;; Create earnings_portland table
  (jdbc/execute! db ["DROP TABLE IF EXISTS pdx_econ.earnings_portland;"])
  (def create-table-earnings-portland
    (sql/sql
     (sql/create-table dbsql :pdx_econ.earnings_portland
                       (sql/column :month :varchar :size 25)
                       (sql/column :manufacturing :float :size 25)
                       (sql/column :construction :float :size 25)
                       (sql/column :leisure_hospitality :float :size 25)
                       (sql/column :financial :float :size 25)
                       (sql/column :trade_transport_utility :float :size 25)
                       (sql/column :services_education_health :float :size 25)
                       (sql/column :information :float :size 25)
                       (sql/column :services_professional_business :float :size 25)
                       (sql/column :government :float :size 25)
                       (sql/column :other :float :size 25))))

  (jdbc/execute! db create-table-earnings-portland)

  (def insert-table-earnings-portland
  (sql/sql
    (sql/insert dbsql :pdx_econ.earnings_portland []
    (sql/values table-pdx-earn-maps-strdate))))

  (jdbc/execute! db insert-table-earnings-portland)

#+end_src

#+RESULTS:
: #'inlight.core/table-pdx-earn#'inlight.core/table-pdx-earn-maps#'inlight.core/date-to-string#'inlight.core/table-pdx-earn-maps-strdate[#:next.jdbc{:update-count 0}]#'inlight.core/create-table-earnings-portland[#:next.jdbc{:update-count 0}]#'inlight.core/insert-table-earnings-portland[#:next.jdbc{:update-count 129}]
* Table creation--PDX Unemployment
#+begin_src clojure :session PDX_ECON
  ;; REPL -- Import table of Portland Employment
  (def table-pdx-emp (ixl/read-xls "../inlight/resources/public/portland-employment.xlsx"))

  (def table-pdx-emp-maps
    (for [mx (i/matrix table-pdx-emp)]
      (zipmap (map keyword
                   (map str/lower-case
                        (map #(str/replace % "-" "_") (i/col-names table-pdx-emp))))
              mx)))

  ;; Change MONTH to string for table upload.
  (def table-pdx-emp-maps-strdate
    (map #(update-in % [:month] date-to-string) table-pdx-emp-maps))


  ;; Create employment_portland table
  (jdbc/execute! db ["DROP TABLE IF EXISTS pdx_econ.employment_portland;"])
  (def create-table-employment-portland
    (sql/sql
     (sql/create-table dbsql :pdx_econ.employment_portland
                       (sql/column :month :varchar :size 25)
                       (sql/column :labor_force :float :size 25)
                       (sql/column :employment :float :size 25)
                       (sql/column :unemployment :float :size 25)
                       (sql/column :unemployment_rate :float :size 25)
                       )))


  (jdbc/execute! db create-table-employment-portland)

  (def insert-table-employment-portland
  (sql/sql
    (sql/insert dbsql :pdx_econ.employment_portland []
    (sql/values table-pdx-emp-maps-strdate))))

  (jdbc/execute! db insert-table-employment-portland)
#+end_src

#+RESULTS:
: #'inlight.core/table-pdx-emp#'inlight.core/table-pdx-emp-maps#'inlight.core/table-pdx-emp-maps-strdate[#:next.jdbc{:update-count 0}]#'inlight.core/create-table-employment-portland[#:next.jdbc{:update-count 0}]#'inlight.core/insert-table-employment-portland[#:next.jdbc{:update-count 129}]
* SQL
#+begin_src sql :engine "postgresql" :database ECON :dbuser postgres :dbpassword postgres :session pdx_econ
  DROP TABLE IF EXISTS pdx_econ.earnings_employment_join;
  CREATE UNLOGGED TABLE pdx_econ.earnings_employment_join as (
  SELECT TO_DATE(ea.month, 'MM/DD/YYYY') as pdx_month, emp.unemployment_rate, ea.manufacturing, ea.construction, ea.leisure_hospitality, ea.financial, ea.trade_transport_utility, ea.services_education_health, ea.information, ea.services_professional_business, ea.government, ea.other
  FROM pdx_econ.earnings_portland as ea
  LEFT JOIN pdx_econ.employment_portland as emp
  ON ea.month = emp.month
  ORDER BY pdx_month desc
  );

  SELECT * FROM pdx_econ.earnings_employment_join limit 5;
#+end_src

#+RESULTS:
| DROP TABLE |                   |               |              |                     |           |                         |                           |             |                                |            |       |
|------------+-------------------+---------------+--------------+---------------------+-----------+-------------------------+---------------------------+-------------+--------------------------------+------------+-------|
| SELECT 129 |                   |               |              |                     |           |                         |                           |             |                                |            |       |
|  pdx_month | unemployment_rate | manufacturing | construction | leisure_hospitality | financial | trade_transport_utility | services_education_health | information | services_professional_business | government | other |
| 2020-09-01 |               7.7 |         119.9 |         75.5 |                89.8 |      70.6 |                   212.1 |                     174.3 |        24.6 |                          181.3 |      141.7 |  38.8 |
| 2020-08-01 |               9.1 |           120 |         79.2 |                90.9 |        70 |                   210.8 |                     169.3 |        24.4 |                          182.5 |      138.9 |  39.6 |
| 2020-07-01 |              11.2 |         120.8 |         76.7 |                89.4 |      69.5 |                   210.2 |                     167.8 |        24.3 |                          183.8 |      137.1 |  39.4 |
| 2020-06-01 |              11.8 |         121.2 |         76.7 |                84.8 |      69.2 |                   206.8 |                     167.8 |        24.6 |                          179.2 |      145.2 |  38.6 |
| 2020-05-01 |                14 |         118.3 |         74.7 |                62.4 |      68.1 |                   203.7 |                     164.5 |        23.9 |                            177 |      146.4 |    37 |

* SQL--Create YOY table
#+begin_src sql :engine "postgresql" :database ECON :dbuser postgres :dbpassword postgres :session pdx_econ
  DROP TABLE IF EXISTS pdx_econ.earnings_employment_12mo_lag;
  CREATE UNLOGGED TABLE pdx_econ.earnings_employment_12mo_lag as (
  SELECT pdx_month, unemployment_rate, LAG(unemployment_rate, 12) OVER (ORDER BY pdx_month) as unemployment_rate_12mo_lag
  FROM pdx_econ.earnings_employment_join
  ORDER BY pdx_month desc
  );

  SELECT * FROM pdx_econ.earnings_employment_12mo_lag LIMIT 13;

  DROP TABLE IF EXISTS pdx_econ.earnings_employment_yoy_change;
  CREATE TABLE pdx_econ.earnings_employment_yoy_change as (
  SELECT pdx_month, unemployment_rate,
  (round(((unemployment_rate - unemployment_rate_12mo_lag)/unemployment_rate_12mo_lag)::numeric, 4) *100)::float as unemployment_rate_yoy_pct_change
  FROM pdx_econ.earnings_employment_12mo_lag
  ORDER BY pdx_month desc
  );

  SELECT * FROM pdx_econ.earnings_employment_yoy_change LIMIT 13;
#+end_src

#+RESULTS:
| DROP TABLE |                   |                                  |
|------------+-------------------+----------------------------------|
| SELECT 129 |                   |                                  |
|  pdx_month | unemployment_rate |       unemployment_rate_12mo_lag |
| 2020-09-01 |               7.7 |                              3.1 |
| 2020-08-01 |               9.1 |                              3.7 |
| 2020-07-01 |              11.2 |                              3.8 |
| 2020-06-01 |              11.8 |                              3.8 |
| 2020-05-01 |                14 |                              3.4 |
| 2020-04-01 |              14.2 |                              3.6 |
| 2020-03-01 |               3.6 |                              4.1 |
| 2020-02-01 |               3.5 |                              4.1 |
| 2020-01-01 |               3.4 |                              4.2 |
| 2019-12-01 |               2.8 |                              3.7 |
| 2019-11-01 |               2.9 |                              3.6 |
| 2019-10-01 |                 3 |                              3.6 |
| 2019-09-01 |               3.1 |                              3.5 |
| DROP TABLE |                   |                                  |
| SELECT 129 |                   |                                  |
|  pdx_month | unemployment_rate | unemployment_rate_yoy_pct_change |
| 2020-09-01 |               7.7 |                           148.39 |
| 2020-08-01 |               9.1 |                           145.95 |
| 2020-07-01 |              11.2 |                           194.74 |
| 2020-06-01 |              11.8 |                           210.53 |
| 2020-05-01 |                14 |                           311.76 |
| 2020-04-01 |              14.2 |                           294.44 |
| 2020-03-01 |               3.6 |                            -12.2 |
| 2020-02-01 |               3.5 |                           -14.63 |
| 2020-01-01 |               3.4 |                           -19.05 |
| 2019-12-01 |               2.8 |                           -24.32 |
| 2019-11-01 |               2.9 |                           -19.44 |
| 2019-10-01 |                 3 |                           -16.67 |
| 2019-09-01 |               3.1 |                           -11.43 |

